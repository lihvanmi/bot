import uuid
import os
import io
import logging
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from pydub import AudioSegment
from difflib import get_close_matches

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7816260297:AAFDjI4_Tvsm9k6t8uymdUGkwD5zSptiCJI"
SALUTE_SPEECH_CLIENT_ID = "0750183c-dc6b-4a49-bc5e-7cfbdc5a93e6"
CLIENT_SECRET = "76c46237-c157-42cd-a71a-e2523bb686fe"
AUTHORIZATION_KEY = "MDc1MDE4M2MtZGM2Yi00YTQ5LWJjNWUtN2NmYmRjNWE5M2U2Ojc2YzQ2MjM3LWMxNTctNDJjZC1hNzFhLWUyNTIzYmI2ODZmZQ=="
TOKEN_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
AUDIO_CHAT_ID = -1002382138419  # ID —á–∞—Ç–∞ –¥–ª—è –∞—É–¥–∏–æ
TARGET_GROUP_ID = -1002385047417  # ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã

# –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
KNOWN_ARTISTS = [
    "–°–∏–∞", "Thirty Seconds to Mars", "Lady Gaga", "–î–∂–µ–π—Å–æ–Ω –î–µ—Ä—É–ª–æ", "Pink",
    "Maroon five", "–î—É–∞ –õ–∏–ø–∞", "OneRepublic", "Imagine Dragons", "–†–∏—Ç–∞ –û—Ä–∞",
    "Coldplay", "David Guetta", "Selena Gomez", "The Black Eyed Peas",
    "Ariana Grande", "Justin Timberlake", "Rihanna", "M√•neskin", "–ú–∞–Ω–µ—Å–∫–∏–Ω",
    "Weeknd", "Shakira", "Ed Sheeran", "Taylor Swift"
]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
SALUTE_SPEECH_TOKEN = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_access_token():
    global SALUTE_SPEECH_TOKEN
    rq_uid = str(uuid.uuid4())
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": rq_uid,
        "Authorization": f"Basic {AUTHORIZATION_KEY}",
    }
    data = {
        "grant_type": "client_credentials",
        "scope": "SALUTE_SPEECH_PERS",
    }
    try:
        response = requests.post(TOKEN_URL, headers=headers, data=data, verify=False)
        if response.status_code == 200:
            SALUTE_SPEECH_TOKEN = response.json().get("access_token")
            logger.info("–¢–æ–∫–µ–Ω Sber SmartSpeech —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {e}")

# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Sber SmartSpeech
def recognize_audio(audio_data: io.BytesIO) -> str:
    global SALUTE_SPEECH_TOKEN
    if not SALUTE_SPEECH_TOKEN:
        get_access_token()

    url = "https://smartspeech.sber.ru/rest/v1/speech:recognize"
    headers = {
        "Authorization": f"Bearer {SALUTE_SPEECH_TOKEN}",
        "Content-Type": "audio/mpeg",
        "Accept": "application/json",
    }
    try:
        response = requests.post(url, headers=headers, data=audio_data.read(), verify=False)
        if response.status_code == 200:
            result = response.json()
            if "result" in result:
                return result["result"]
            else:
                logger.error(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞: {result}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: {e}")
    return None

# –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
def find_closest_artist(text: str) -> str:
    matches = get_close_matches(text, KNOWN_ARTISTS, n=1, cutoff=0.6)
    return matches[0] if matches else None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–≥–æ–ª–æ—Å–æ–≤—ã–µ)
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        voice_file = await update.message.voice.get_file()
        ogg_data = io.BytesIO()
        await voice_file.download_to_memory(out=ogg_data)
        ogg_data.seek(0)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
        mp3_data = convert_ogg_to_mp3(ogg_data)
        if not mp3_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        await process_audio(mp3_data, update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π (MP3)
async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = await update.message.audio.get_file()
        mp3_data = io.BytesIO()
        await audio_file.download_to_memory(out=mp3_data)
        mp3_data.seek(0)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        await process_audio(mp3_data, update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
async def process_audio(audio_data: io.BytesIO, update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = recognize_audio(audio_data)
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if isinstance(text, list):
            text = " ".join(text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞

        if "–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞" in text.lower():
            parts = text.lower().split("–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞")
            if len(parts) > 1:
                next_words = parts[1].strip().split()[:4]  # –ë–µ—Ä–µ–º –¥–æ 4 —Å–ª–æ–≤
                keyword = " ".join(next_words).title()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
                closest_artist = find_closest_artist(keyword)
                if closest_artist:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=f"üåü –ó–≤–µ–∑–¥–∞ —á–∞—Å–∞: {closest_artist}")
                    await message.pin()
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
                    await send_trimmed_audio(update, context, audio_data, text)
        else:
            await update.message.reply_text("–ö–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ '–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
async def send_trimmed_audio(update: Update, context: ContextTypes.DEFAULT_TYPE, audio_data: io.BytesIO, text: str):
    try:
        # –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã)
        audio_segment = AudioSegment.from_mp3(audio_data)
        trimmed_audio = audio_segment[-3000:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_filename = f"trimmed_audio_{os.urandom(8).hex()}.mp3"
        trimmed_audio.export(temp_filename, format="mp3")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –≥—Ä—É–ø–ø—É
        with open(temp_filename, "rb") as audio_file:
            await context.bot.send_audio(
                chat_id=TARGET_GROUP_ID,
                audio=audio_file,
                caption="–Ø –Ω–µ –ø–æ–Ω—è–ª, –∫—Ç–æ –∑–≤–µ–∑–¥–∞ —á–∞—Å–∞. –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç '–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞' –∏ –Ω—É–∂–Ω–æ–µ –∏–º—è."
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ.")

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ MP3
def convert_ogg_to_mp3(ogg_data: io.BytesIO) -> io.BytesIO:
    try:
        audio = AudioSegment.from_ogg(ogg_data)
        mp3_data = io.BytesIO()
        audio.export(mp3_data, format="mp3")
        mp3_data.seek(0)
        return mp3_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))  # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))  # –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
